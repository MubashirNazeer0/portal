"""
Django settings for AMS project.

Generated by 'django-admin startproject' using Django 2.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import environ

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

env = environ.Env(
    # set casting, default value
    SECRET_KEY=str
)
env_path = os.path.join(BASE_DIR, '.env')

# reading .env file
environ.Env.read_env('.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "dummy-secret-key-for-development"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG=True
# SECRET_KEY="jk96@1(ao=xpd(rsj_$7v)oufimw*h^txq^19)()w5az_&@z%"
# DATABASE_USER='postgres'
# DATABASE_PASSWORD='dingoo12'
# DATABASE_PORT='5432'

ALLOWED_HOSTS = ['*']
# ALLOWED_HOSTS = ['.onrender.com', 'www.cba-rz7p.onrender.com/']

# Application definition
CRISPY_TEMPLATE_PACK = 'bootstrap4'
INSTALLED_APPS = [
    'debug_toolbar',
    'dash.apps.DashConfig',
    'users.apps.UsersConfig',
    'events.apps.EventsConfig',
    'feedback.apps.FeedbackConfig',
    'crispy_forms',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mathfilters',
    "babel",
]

MIDDLEWARE = [

    'django.middleware.security.SecurityMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    # 'django.middleware.locale.LocaleMiddleware',  # Must be placed after CommonMiddleware

    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'AMS.urls'

# DEBUG_TOOLBAR_PANELS = (
#     'debug_toolbar.panels.version.VersionDebugPanel',
#     'debug_toolbar.panels.timer.TimerDebugPanel',
#     'debug_toolbar.panels.settings.SettingsPanel',
#     'debug_toolbar.panels.headers.HeaderDebugPanel',
#     'debug_toolbar.panels.request.RequestPanel',
#     'debug_toolbar.panels.template.TemplateDebugPanel',
#     'debug_toolbar.panels.sql.SQLDebugPanel',
#     'debug_toolbar.panels.signals.SignalDebugPanel',
#
# )

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['feedback/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                
                'django.contrib.messages.context_processors.messages',
                'users.context_processors.pending_users',
            ],
        },
    },
]

WSGI_APPLICATION = 'AMS.wsgi.application'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),  # This will create a file named db.sqlite3 in your project root
#     }
# }

import os
from urllib.parse import urlparse

# Get the Postgres URL from the environment variables
DATABASE_URL = os.getenv('DATABASE_URL')  # Set this on Render's environment variables

# Parse the database URL
url = urlparse(DATABASE_URL)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'cba',  # Database name (cba)
        'USER': 'cba_user',  # Username (cba_user)
        'PASSWORD': 'fh5nZMsHcK3q4Ai4Ho13v0EoZ1quegja',  # Password (fh5nZMsHcK3q4Ai4Ho13v0EoZ1quegja)
        'HOST': 'dpg-ct2s7gl2ng1s73brqvk0-a',  # Hostname (dpg-ct2s7gl2ng1s73brqvk0-a)
        'PORT': '5432',  # Port (5432)
    }
}






# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    # },
    # {
        # 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


def show_toolbar(request):
    return False

# DEBUG = False
DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK": show_toolbar,
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/


# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, "static"),
#     '/var/www/static/',
# ]
# Static files (CSS, JavaScript, images)
STATIC_URL = '/static/'
# Directory for your custom static files (used in development)
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')  # This points to your custom static folder
]

# Directory where all static files will be collected (used in production)
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Make sure this is a separate folder


CRISPY_TEMPLATE_PACK = 'bootstrap4'
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'dash-home'

INTERNAL_IPS = [
    # ...
    '127.0.0.1'
    # ...
]

# Where to store uploaded files
# MEDIA_ROOT = ''
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# MEDIA_URL = ''
MEDIA_URL = '/media/'




# settings.py

LANGUAGE_CODE = 'en-us'  # Default language
USE_I18N = True  # Enable internationalization
USE_L10N = True  # Enable localized formatting
USE_TZ = True  # Enable timezone support

# Supported languages
LANGUAGES = [
    ('en', 'English'),
    ('ar', 'Arabic'),
]
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent
# Path to the locale directory
LOCALE_PATHS = [
    BASE_DIR / 'locale',  # This works because BASE_DIR is now a Path object
]